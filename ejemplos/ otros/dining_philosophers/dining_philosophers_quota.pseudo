// Solución 2: Hay una cuota o límite (de 4) en la cantidad de filósofos que pueden intentar comer al mismo tiempo, implementada por un multiplex
procedure main(argc, argv[]):
  shared chopsticks[] := create_semaphores(5, 1)
  shared quota := create_semaphore(4) // multiplex para limitar el numero de filosofos que pueden comer al mismo tiempo

  for id := 0 to 5 do
    create_thread(philosopher, id)
  end for
end procedure

procedure philosopher(id):
  while true do
    think()
    wait(quota) // esperamos para poder comer
    // el numero maximo que pueden comer al mismo tiempo es 4, de esta manera
    // uno de ellos siempre va a tener 2 palillos, luego los va a liberar haciendo
    // signal y el siguiente va a poder comer
      get_left_chopstick(id)
      get_right_chopstick(id)
      eat()
      put_left_chopstick(id)
      put_right_chopstick(id)
    signal(quota)
  end while
end procedure

procedure get_left_chopstick(id):
  wait(chopsticks[(id + 1) mod 5])
end procedure

procedure get_right_chopstick(id):
  wait(chopsticks[id])
end procedure

procedure put_left_chopstick(id):
  signal(chopsticks[(id + 1) mod 5])
end procedure

procedure put_right_chopstick(id):
  signal(chopsticks[id])
end procedure