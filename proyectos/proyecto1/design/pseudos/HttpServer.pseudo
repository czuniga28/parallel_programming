
procedure HttpServer():
  this.socketsQueue := new Queue<Socket>()
end procedure

procedure ~HttpServer():
  delete this.socketsQueue
  for index := 0 to this.workersCount - 1 do
      delete this.connectionHandlers[index]
  end for
end procedure

procedure getInstance():
  static httpserver := new HttpServer()
  return httpserver
end procedure

procedure listenForever(port):
  TcpServer.listenForever(port)
end procedure

procedure chainWebApp(application):
  this.applications.push(application)
end procedure

procedure run(argc, argv):
  stopApps := false
  try:
    if this.analyzeArguments(argc, argv) then
    Log.getInstance().start()
    this.startApps()
    stopApps := true

    this.connectionHandlers.resize(this.workersCount)
    for index := 0 to this.workersCount - 1 do
        this.connectionHandlers[index] := new HttpConnectionHandler()
    end for

    this.dispatcher := new HttpDispatcher()
    this.dispatcher.createOwnQueue()

    for index := 0 to this.workersCount - 1 do
      this.connectionHandlers[index].setConsumingQueue(this.socketsQueue)
      this.connectionHandlers[index].setProducingQueue(this.dispatcher.getConsumingQueue())
    end for

    for index := 0 to this.applications.size() - 1 do
      appKey := this.applications[index].getKey()
      this.dispatcher.registerRedirect(appKey, this.applications[index].getEntranceQueue())
      if appKey == "/" then
        homeWebApp := cast(HomeWebApp, this.applications[index])
        homeWebApp.homeConsumer.setProducingQueue(this.dispatcher.getConsumingQueue())
      end if
    end for

    for index := 0 to this.workersCount - 1 do
      this.connectionHandlers[index].startThread()
    end for

    this.dispatcher.startThread()
    this.listenForConnections(this.port)
    address := this.getNetworkAddress()
    Log.append(Log.INFO, "webserver", "Listening on " + address.getIP() + " port " + str(address.getPort()))

    this.acceptAllConnections()
    end if
  except runtime_error as error:
    print("error: " + error.what())
  end try

  this.sendEmptySockets()
  this.waitingFinish()

  if stopApps then
    this.stopApps()
  end if

  Log.getInstance().stop()
  return EXIT_SUCCESS
end procedure

procedure sendEmptySockets():
  for index := 0 to this.workersCount - 1 do
    this.socketsQueue.enqueue(Socket())
  end for
end procedure

procedure waitingFinish():
  for index := 0 to this.workersCount - 1 do
    this.connectionHandlers[index].waitToFinish()
    print("Closing thread: subprocess " + str(index))
  end for
  print("All closed")
end procedure

procedure startApps():
  for index := 0 to this.applications.size() - 1 do
    this.applications[index].start()
  end for
end procedure

procedure stopApps():
  for index := 0 to this.applications.size() - 1 do
    this.applications[index].stop()
  end for
end procedure

procedure stop():
  this.stopListening()
end procedure

procedure analyzeArguments(argc, argv):
  for index := 1 to argc - 1 do
    argument := argv[index]
    if "help" in argument then
      print(usage)
      return false
    end if
  end for

  this.workersCount := thread.hardware_concurrency()

  if argc >= 3 then
    this.port := argv[1]
    this.workersCount := stoi(argv[2])
  elif argc >= 2 then
    this.port := argv[1]
  end if

  return true
end procedure

procedure handleClientConnection(client):
  this.socketsQueue.enqueue(client)
end procedure

procedure handleHttpRequest(httpRequest, httpResponse):
  address := httpRequest.getNetworkAddress()
  Log.append(Log.INFO, "connection", "connection established with client " + address.getIP() + " port " + str(address.getPort()))
  Log.append(Log.INFO, "request", httpRequest.getMethod() + ' ' + httpRequest.getURI() + ' ' + httpRequest.getHttpVersion())
  return this.route(httpRequest, httpResponse)
end procedure

procedure route(httpRequest, httpResponse):
  for index := 0 to this.applications.size() - 1 do
    app := this.applications[index]
    if app.handleHttpRequest(httpRequest, httpResponse) then
      return true
    end if
  end for

  return this.serveNotFound(httpRequest, httpResponse)
end procedure

procedure serveNotFound(httpRequest, httpResponse):
  httpResponse.setStatusCode(404)
  httpResponse.setHeader("Server", "AttoServer v1.0")
  httpResponse.setHeader("Content-type", "text/html; charset=ascii")

  title := "Not found"
  httpResponse.body() << "<!DOCTYPE html>\n"
  << "<html lang=\"en\">\n"
  << "  <meta charset=\"ascii\"/>\n"
  << "  <title>" << title << "</title>\n"
  << "  <style>body {font-family: monospace} h1 {color: red}</style>\n"
  << "  <h1>" << title << "</h1>\n"
  << "  <p>The requested resource was not found on this server.</p>\n"
  << "  <hr><p><a href=\"/\">Homepage</a></p>\n"
  << "</html>\n"
  return httpResponse.send()
end procedure

